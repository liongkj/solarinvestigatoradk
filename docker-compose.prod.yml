volumes:
  timeseries_data:
    driver: local

services:
  # PostgreSQL database for ADK DatabaseSessionService
  adk_db:
    image: postgres:17
    container_name: adk_db_prod
    env_file:
      - .env.docker
    environment:
      POSTGRES_USER: adk_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-my-password}
      POSTGRES_DB: adk_db
    volumes:
      - timeseries_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U adk_user -d adk_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  # FastAPI Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: solar_backend_prod
    # Remove external port exposure since nginx will handle it
    depends_on:
      adk_db:
        condition: service_healthy
    env_file:
      - .env.docker
    environment:
      - DATABASE_URL=postgresql://adk_user:${POSTGRES_PASSWORD:-my-password}@adk_db:5432/adk_db
      - CORS_ORIGINS=["http://nginx", "http://localhost", "https://yourdomain.com"]
      - CORS_ALLOW_CREDENTIALS=true
      - CORS_ALLOW_METHODS=["GET", "POST", "PUT", "DELETE"]
      - CORS_ALLOW_HEADERS=["*"]
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - ENVIRONMENT=production
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Angular Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: solar_frontend_prod
    # Remove external port exposure since nginx will handle it
    environment:
      - BACKEND_URL=/api
      - API_URL=/api
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: solar_nginx_prod
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
