volumes:
  timeseries_data:
    driver: local

services:
  # PostgreSQL database for ADK DatabaseSessionService
  adk_db:
    image: postgres:17
    container_name: adk_db_prod
    environment:
      POSTGRES_USER: adk_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-my-secure-password}
      POSTGRES_DB: adk_db
    volumes:
      - timeseries_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U adk_user -d adk_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  # FastAPI Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: solar_backend_prod
    depends_on:
      adk_db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://adk_user:${POSTGRES_PASSWORD:-my-secure-password}@adk_db:5432/adk_db
      - CORS_ORIGINS=["https://yourdomain.com", "http://frontend"]
      - CORS_ALLOW_CREDENTIALS=true
      - CORS_ALLOW_METHODS=["GET", "POST", "PUT", "DELETE"]
      - CORS_ALLOW_HEADERS=["*"]
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - ENVIRONMENT=production
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Angular Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: solar_frontend_prod
    # No ports exposed - only accessible through nginx reverse proxy
    environment:
      - BACKEND_URL=http://backend:8000
      - API_URL=http://backend:8000/api
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app-network

  # Reverse proxy (optional but recommended for production)
  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
