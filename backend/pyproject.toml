[project]
name = "pastimenang"
version = "0.1.0"
description = "Solar investigation agent powered by Google AI"
readme = "README.md"
requires-python = ">=3.13"
authors = [
    { name = "Your Name", email = "your.email@example.com" },
]
license = { text = "MIT" }
keywords = ["ai", "agent", "solar", "investigation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "fastapi[standard]>=0.115.12",
    "google-adk>=1.1.1",
    "google-genai>=1.18.0",
    "langchain-core>=0.3.64",
    "python-dotenv>=1.1.0",
    "streamlit>=1.45.1",
    "streamlit-feedback>=0.1.4",
    "toolbox-core>=0.2.0",
    # Database dependencies for ADK DatabaseSessionService
    "psycopg2-binary>=2.9.9",
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.0",
    "httpx>=0.28.1",
    "pydantic>=2.11.7",
]

[dependency-groups]
dev = [
    "ruff>=0.8.0",
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "mypy>=1.10.0",
    "pre-commit>=3.8.0",
]

[project.scripts]
pastimenang = "solar_investigator:main"

[project.urls]
Homepage = "https://github.com/yourusername/pastimenang"
Repository = "https://github.com/yourusername/pastimenang"
Issues = "https://github.com/yourusername/pastimenang/issues"

[tool.ruff]
target-version = "py313"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
    "S",   # flake8-bandit
    "T20", # flake8-print
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by formatter
    "B008",   # do not perform function calls in argument defaults
    "S101",   # use of assert detected
    "PLR0913", # too many arguments to function call
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "T201",   # print found

    "ERA001", # commented-out code allowed
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["solar_investigator"]
force-sort-within-sections = true

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101", "PLR2004", "ARG001"]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --cov=solar_investigator --cov-report=term-missing"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["solar_investigator"]
omit = ["tests/*", "*/migrations/*", "venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.uv]
package = true
